#!/usr/bin/env python

import game
from optparse import OptionParser
import sys

parser = OptionParser()
parser.add_option("-U", "--username", dest="username",
                  help="username of login")
parser.add_option("-P", "--password", dest="password",
                  help="password for login")
parser.add_option("-t", "--type", dest="type",
                  help="type of ship to build", default="frigates")
parser.add_option("-r", "--radius", dest="radius",
                  help="maximum distance from sink to initiate a build",
                  default=5.0,
                  type="float")
(options, args) = parser.parse_args()

sink_opt = args[0]

g=game.Galaxy()
if options.username and options.password:
  # explicit login
  g.login(options.username, options.password, force=True)
else:
  # try to pick up stored credentials
  g.login("", "")

try:
  sink = g.get_planet(int(sink_opt))
except ValueError:
  sink = g.find_planet(sink_opt)
sink.load()
print "using planet %d with name %s" % (sink.planetid, sink.name)

total = 0

for p in g.planets:
  p.load()
  if p.planetid != sink.planetid and sink.distance_to(p) <= options.radius:
    surplus = 1
    while p.can_build({options.type: surplus}):
      surplus += 1
    surplus -= 1
    if surplus > 0:
      print "%s can build %d %s" % (p.name, surplus, options.type)
      fleet = p.build_fleet({options.type: surplus},
                            interactive=False,
                            skip_check=True)
      total += surplus
      print "moving %d to %s" % (fleet.fleetid, sink.name)
      fleet.move_to_planet(sink)

value = game.ship_cost({options.type: total})
print "collected %d steel" % value['steel']

